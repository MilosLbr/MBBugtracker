@model DataModels.ViewModels.ProjectDetailsViewModel
@using DataModels.EnumConstants

@{
    ViewData["Title"] = "Details for " + Model.ProjectName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3 class="mb-2">
    @Model.ProjectName
</h3>

<hr />

<p class="d-none" id="userId" data-userid="@ViewBag.userId">

</p>

<div>
    <div>
        <div>
            <p>
                Created by <span class="text-info">@Model.ApplicationUser.UserName</span>.
            </p>
        </div>
        <p>
            Start date : <span class="text-danger">@Model.StartDate.ToString("dd.MM.yyyy.")</span>
        </p>
        <p>
            Status: <span class="text-success">@Model.ProjectStatus.StatusName</span>.
        </p>
    </div>

    <div class="projectDescription mb-3">
        <h6 class="p-1">Description:</h6>
        <p class="p-1 lead ">
            @Model.Description
        </p>
    </div>

    <div class="mb-3">
        @if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
        {
            <a title="Edit" asp-action="Edit" class="btn btn-info" asp-route-id="@Model.Id"><i class="fas fa-edit"></i></a>
        }

        @if (ViewBag.userId == Model.ApplicationUserId)
        {
            //only project creator can delete project
            <a title="Delete" asp-action="Delete" class="btn btn-danger" asp-route-id="@Model.Id"><i class="far fa-trash-alt"></i></a>
        }
    </div>

    <div class=" p-2">
        <h5>
            Developers working on this project:
        </h5>
        <div class="col-12">
            <ul>
                @foreach (var projUser in Model.AssignedDevelopers)
                {
                    <li>@projUser.ApplicationUser.UserName</li>
                }
            </ul>
        </div>
    </div>
</div>

<div id="filterButtons" class="container">
    <div class=" row justify-content-sm-around">
        <button class="btn btn-warning col-sm-2 mb-1 " id="getActiveTicketsBtn">
            Active (@Model.ProjectTickets.Where(t => t.TicketStatus.Id != (int)EnumConstants.TicketStatuses.Closed).Count())
        </button>
        <button class="btn btn-success col-sm-2 mb-1" id="getClosedTicketsBtn">
            Closed (@Model.ProjectTickets.Where(t => t.TicketStatus.Id == (int)EnumConstants.TicketStatuses.Closed).Count())
        </button>
        <button class="btn btn-danger col-sm-2 mb-1" id="getOverdueTicketsBtn">
            Overdue (@Model.ProjectTickets.Where(t =>
                       {
                           var now = DateTime.Now;
                           var result = DateTime.Compare(now.Date, t.DueDate.Date);

                           return result > 0 && t.TicketStatus.Id != (int)EnumConstants.TicketStatuses.Closed; // count only tickets that are not closed (status 2)
                       }).Count())
        </button>
        <button title="Due on: @DateTime.Now.AddDays(7).ToShortDateString()" class="btn btn-info col-sm-2 mb-1" id="getTikcetsDueInSeven">
            Due in next 7 days (@Model.ProjectTickets.Where(t =>
                                {
                                var now = DateTime.Now;
                                var sevenDaysFromNow = DateTime.Now.AddDays(7);
                                var compareNow = DateTime.Compare(t.DueDate.Date, now.Date);
                                var compareSevenDays = DateTime.Compare(t.DueDate.Date, sevenDaysFromNow.Date);

                                return compareNow >= 0 && compareSevenDays <= 0 && t.TicketStatus.Id != (int)EnumConstants.TicketStatuses.Closed;
                                }).Count())
        </button>
        <button class="btn btn-primary col-sm-2 mb-1" id="getAllTicketsBtn">
            All tickets (@Model.ProjectTickets.Count())
        </button>
    </div>
</div>

<hr class="mb-4" />
<div id="ticketsTableContainer">
    <table id="ticketsForThisProject" class="table table-striped ticketListContainer">
        <thead class="table-dark table-bordered">
            <tr>
                <th data-priority="1">Ticket</th>
                <th>Reported by</th>
                <th data-priority="2">Priority</th>
                <th>Status</th>
                <th>Type</th>
                <th>Created on</th>
                <th data-priority="3">Due date</th>
            </tr>
        </thead>
    </table>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>


@section scripts{

    <script>

        $(document).ready(function () {

            let initialTicketsToDisplay = @Html.Raw(Json.Serialize(Model.ProjectTickets));

            fillTableWithData(initialTicketsToDisplay);

            $("#getActiveTicketsBtn").on("click", function () {
                let ticketTableData = @Html.Raw(Json.Serialize(Model.ProjectTickets.Where(t => t.TicketStatus.Id != (int)EnumConstants.TicketStatuses.Closed)));

                fillTableWithData(ticketTableData);
            });

            $("#getClosedTicketsBtn").on("click", function () {
                let ticketTableData = @Html.Raw(Json.Serialize(Model.ProjectTickets.Where(t => t.TicketStatus.Id == (int)EnumConstants.TicketStatuses.Closed)));

                fillTableWithData(ticketTableData);
            });

            $("#getOverdueTicketsBtn").on("click", function () {
                let ticketTableData = @Html.Raw(Json.Serialize(@Model.ProjectTickets.Where(t =>
                    {
                        var now = DateTime.Now;
                        var result = DateTime.Compare(now.Date, t.DueDate.Date);

                        return result > 0 && t.TicketStatus.Id != (int)EnumConstants.TicketStatuses.Closed;
                    }).ToList()));

                fillTableWithData(ticketTableData);

            });

            $("#getTikcetsDueInSeven").on("click", function () {
                let ticketTableData = @Html.Raw(Json.Serialize(Model.ProjectTickets.Where(t =>
                    {
                        var now = DateTime.Now;
                        var sevenDaysFromNow = DateTime.Now.AddDays(7);
                        var compareNow = DateTime.Compare(t.DueDate.Date, now.Date);
                        var compareSevenDays = DateTime.Compare(t.DueDate.Date, sevenDaysFromNow.Date);

                        return compareNow >= 0 && compareSevenDays <= 0 && t.TicketStatus.Id != (int)EnumConstants.TicketStatuses.Closed;
                    }).ToList()));

                fillTableWithData(ticketTableData);
            });

            $("#getAllTicketsBtn").on("click", function () {
                fillTableWithData(initialTicketsToDisplay);
            })


        });
    </script>
    <script src="~/js/Projects/Details/fillTableWithData.js"></script>

}